package com.javatechie.controller;

import com.javatechie.config.Decrypt;
import com.javatechie.config.EncryptString;
import com.javatechie.dto.AuthRequest;
import com.javatechie.entity.UserCredential;
import com.javatechie.service.AuthService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

@RestController
//@CrossOrigin(origins="*")
@RequestMapping("/api/auth")
public class AuthController {
    @Autowired
    private AuthService service;

    @Autowired
    private AuthenticationManager authenticationManager;
    
 // Inject the EncryptString class for encryption
    @Autowired
    private EncryptString encryptString;

    // Inject the Decrypt class for decryption
    @Autowired
    private Decrypt decrypt;
    

    @PostMapping("/register")
    public String addNewUser(@RequestBody UserCredential user) {
    	try {
    		System.out.println("Encrypted user details:   "+user.getEmail()+user.getName()+user.getPassword());
    	 // Encrypt sensitive user data before saving
        String encryptedUserName = encryptString.encrypt(user.getName(), "rrhysrg54e75sy6y");
      System.out.println("encryptedUserName:   "+encryptedUserName);
   // Set encrypted data to user object
      user.setName(encryptedUserName);
        return service.saveUser(user);
    }
    	catch (Exception e) {
            e.printStackTrace();
            return "Error occurred: " + e.getMessage();
        }
    }
    	
    	
    @PostMapping("/token")
    public String getToken(@RequestBody AuthRequest authRequest) {
    	try {
    		System.out.println("authRequest:-      "+authRequest.getUsername()+"       Password:-     "+authRequest.getPassword());
    	String encryptedUserName = encryptString.encrypt(authRequest.getUsername(), "rrhysrg54e75sy6y");
    	System.out.println("EncryptedUserName:       "+encryptedUserName);
        Authentication authenticate = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(encryptedUserName, authRequest.getPassword()));
        if (authenticate.isAuthenticated()) {
            return service.generateToken(authRequest.getUsername());
        } else {
            throw new RuntimeException("invalid access");
        }
    	}catch (Exception e) {
            e.printStackTrace();
            return "Error occurred: " + e.getMessage();
        }
    }

    @GetMapping("/validate")
    public String validateToken(@RequestParam("token") String token) {
        service.validateToken(token);
        return "Token is valid";
    }
}
